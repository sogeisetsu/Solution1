### YamlMime:ManagedReference
items:
- uid: ConsoleApp1.BookA
  commentId: T:ConsoleApp1.BookA
  id: BookA
  parent: ConsoleApp1
  children:
  - ConsoleApp1.BookA.#ctor
  - ConsoleApp1.BookA.#ctor(System.String,System.Int32,System.String)
  - ConsoleApp1.BookA.Author
  - ConsoleApp1.BookA.defaultFun
  - ConsoleApp1.BookA.Details
  - ConsoleApp1.BookA.ExtensionData
  - ConsoleApp1.BookA.Finalize
  - ConsoleApp1.BookA.Name
  - ConsoleApp1.BookA.One
  - ConsoleApp1.BookA.One(System.Int32)
  - ConsoleApp1.BookA.One(System.String)
  - ConsoleApp1.BookA.OutCompany
  - ConsoleApp1.BookA.Time
  - ConsoleApp1.BookA.timestamp
  - ConsoleApp1.BookA.ToString
  langs:
  - csharp
  - vb
  name: BookA
  nameWithType: BookA
  fullName: ConsoleApp1.BookA
  type: Class
  source:
    id: BookA
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 88
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n用于测试的类\n"
  example: []
  syntax:
    content: public class BookA
    content.vb: Public Class BookA
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ConsoleApp1.BookA.timestamp
  commentId: F:ConsoleApp1.BookA.timestamp
  id: timestamp
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: timestamp
  nameWithType: BookA.timestamp
  fullName: ConsoleApp1.BookA.timestamp
  type: Field
  source:
    id: timestamp
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 100
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n时间戳\n"
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public long timestamp
    return:
      type: System.Int64
    content.vb: >-
      <JsonInclude>

      Public timestamp As Long
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.#ctor
  commentId: M:ConsoleApp1.BookA.#ctor
  id: '#ctor'
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: BookA()
  nameWithType: BookA.BookA()
  fullName: ConsoleApp1.BookA.BookA()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 102
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: public BookA()
    content.vb: Public Sub New
  overload: ConsoleApp1.BookA.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.#ctor(System.String,System.Int32,System.String)
  commentId: M:ConsoleApp1.BookA.#ctor(System.String,System.Int32,System.String)
  id: '#ctor(System.String,System.Int32,System.String)'
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: BookA(String, Int32, String)
  nameWithType: BookA.BookA(String, Int32, String)
  fullName: ConsoleApp1.BookA.BookA(System.String, System.Int32, System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 112
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n定义书的基本信息\n"
  example: []
  syntax:
    content: public BookA(string name, int peices, string outCompany = "无")
    parameters:
    - id: name
      type: System.String
      description: '书名 '
    - id: peices
      type: System.Int32
      description: '价格 '
    - id: outCompany
      type: System.String
      description: '出版商 '
    content.vb: Public Sub New(name As String, peices As Integer, outCompany As String = "无")
  overload: ConsoleApp1.BookA.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.Finalize
  commentId: M:ConsoleApp1.BookA.Finalize
  id: Finalize
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: BookA.Finalize()
  fullName: ConsoleApp1.BookA.Finalize()
  type: Method
  source:
    id: Finalize
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 122
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n析构函数（终结器）\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: ConsoleApp1.BookA.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: ConsoleApp1.BookA.Author
  commentId: P:ConsoleApp1.BookA.Author
  id: Author
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: BookA.Author
  fullName: ConsoleApp1.BookA.Author
  type: Property
  source:
    id: Author
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 131
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n作者\n"
  example: []
  syntax:
    content: >-
      [JsonPropertyName("作者")]

      public string Author { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonPropertyName("作者")>

      Public Property Author As String
  overload: ConsoleApp1.BookA.Author*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 作者
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.OutCompany
  commentId: P:ConsoleApp1.BookA.OutCompany
  id: OutCompany
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: OutCompany
  nameWithType: BookA.OutCompany
  fullName: ConsoleApp1.BookA.OutCompany
  type: Property
  source:
    id: OutCompany
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 141
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n书的出版商\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public string OutCompany { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonIgnore>

      Public Property OutCompany As String
  overload: ConsoleApp1.BookA.OutCompany*
  attributes:
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.Time
  commentId: P:ConsoleApp1.BookA.Time
  id: Time
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: Time
  nameWithType: BookA.Time
  fullName: ConsoleApp1.BookA.Time
  type: Property
  source:
    id: Time
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 147
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n出版时间\n"
  example: []
  syntax:
    content: public DateTime Time { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property Time As Date
  overload: ConsoleApp1.BookA.Time*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.Name
  commentId: P:ConsoleApp1.BookA.Name
  id: Name
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: BookA.Name
  fullName: ConsoleApp1.BookA.Name
  type: Property
  source:
    id: Name
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 156
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n书的名称\n"
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public string Name { set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonInclude>

      Public WriteOnly Property Name As String
  overload: ConsoleApp1.BookA.Name*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: ConsoleApp1.BookA.Details
  commentId: P:ConsoleApp1.BookA.Details
  id: Details
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: Details
  nameWithType: BookA.Details
  fullName: ConsoleApp1.BookA.Details
  type: Property
  source:
    id: Details
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 164
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: >-
      [JsonInclude]

      public Dictionary<string, int> Details { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
    content.vb: >-
      <JsonInclude>

      Public ReadOnly Property Details As Dictionary(Of String, Integer)
  overload: ConsoleApp1.BookA.Details*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ConsoleApp1.BookA.defaultFun
  commentId: P:ConsoleApp1.BookA.defaultFun
  id: defaultFun
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: defaultFun
  nameWithType: BookA.defaultFun
  fullName: ConsoleApp1.BookA.defaultFun
  type: Property
  source:
    id: defaultFun
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 170
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: public DefaultFun defaultFun { get; set; }
    parameters: []
    return:
      type: ConsoleApp1.DefaultFun
    content.vb: Public Property defaultFun As DefaultFun
  overload: ConsoleApp1.BookA.defaultFun*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.ExtensionData
  commentId: P:ConsoleApp1.BookA.ExtensionData
  id: ExtensionData
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: ExtensionData
  nameWithType: BookA.ExtensionData
  fullName: ConsoleApp1.BookA.ExtensionData
  type: Property
  source:
    id: ExtensionData
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 175
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\n储存反序列化时候的溢出数据\n"
  example: []
  syntax:
    content: >-
      [JsonExtensionData]

      public Dictionary<string, JsonElement> ExtensionData { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Text.Json.JsonElement}
    content.vb: >-
      <JsonExtensionData>

      Public Property ExtensionData As Dictionary(Of String, JsonElement)
  overload: ConsoleApp1.BookA.ExtensionData*
  attributes:
  - type: System.Text.Json.Serialization.JsonExtensionDataAttribute
    ctor: System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ConsoleApp1.BookA.ToString
  commentId: M:ConsoleApp1.BookA.ToString
  id: ToString
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BookA.ToString()
  fullName: ConsoleApp1.BookA.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 178
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: ConsoleApp1.BookA.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: ConsoleApp1.BookA.One
  commentId: M:ConsoleApp1.BookA.One
  id: One
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: One()
  nameWithType: BookA.One()
  fullName: ConsoleApp1.BookA.One()
  type: Method
  source:
    id: One
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 187
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  summary: "\noverload\n"
  example: []
  syntax:
    content: protected string One()
    return:
      type: System.String
      description: ''
    content.vb: Protected Function One As String
  overload: ConsoleApp1.BookA.One*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: ConsoleApp1.BookA.One(System.Int32)
  commentId: M:ConsoleApp1.BookA.One(System.Int32)
  id: One(System.Int32)
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: One(Int32)
  nameWithType: BookA.One(Int32)
  fullName: ConsoleApp1.BookA.One(System.Int32)
  type: Method
  source:
    id: One
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 192
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: protected string One(int a)
    parameters:
    - id: a
      type: System.Int32
    return:
      type: System.String
    content.vb: Protected Function One(a As Integer) As String
  overload: ConsoleApp1.BookA.One*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: ConsoleApp1.BookA.One(System.String)
  commentId: M:ConsoleApp1.BookA.One(System.String)
  id: One(System.String)
  parent: ConsoleApp1.BookA
  langs:
  - csharp
  - vb
  name: One(String)
  nameWithType: BookA.One(String)
  fullName: ConsoleApp1.BookA.One(System.String)
  type: Method
  source:
    id: One
    path: C:\Users\苏月晟\source\repos\Solution1\ConsoleApp1\newLei.cs
    startLine: 199
  assemblies:
  - ConsoleApp1
  namespace: ConsoleApp1
  syntax:
    content: protected void One(string str)
    parameters:
    - id: str
      type: System.String
    content.vb: Protected Sub One(str As String)
  overload: ConsoleApp1.BookA.One*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: ConsoleApp1
  commentId: N:ConsoleApp1
  name: ConsoleApp1
  nameWithType: ConsoleApp1
  fullName: ConsoleApp1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: ConsoleApp1.BookA.#ctor*
  commentId: Overload:ConsoleApp1.BookA.#ctor
  name: BookA
  nameWithType: BookA.BookA
  fullName: ConsoleApp1.BookA.BookA
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ConsoleApp1.BookA.Finalize*
  commentId: Overload:ConsoleApp1.BookA.Finalize
  name: Finalize
  nameWithType: BookA.Finalize
  fullName: ConsoleApp1.BookA.Finalize
- uid: ConsoleApp1.BookA.Author*
  commentId: Overload:ConsoleApp1.BookA.Author
  name: Author
  nameWithType: BookA.Author
  fullName: ConsoleApp1.BookA.Author
- uid: ConsoleApp1.BookA.OutCompany*
  commentId: Overload:ConsoleApp1.BookA.OutCompany
  name: OutCompany
  nameWithType: BookA.OutCompany
  fullName: ConsoleApp1.BookA.OutCompany
- uid: ConsoleApp1.BookA.Time*
  commentId: Overload:ConsoleApp1.BookA.Time
  name: Time
  nameWithType: BookA.Time
  fullName: ConsoleApp1.BookA.Time
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: ConsoleApp1.BookA.Name*
  commentId: Overload:ConsoleApp1.BookA.Name
  name: Name
  nameWithType: BookA.Name
  fullName: ConsoleApp1.BookA.Name
- uid: ConsoleApp1.BookA.Details*
  commentId: Overload:ConsoleApp1.BookA.Details
  name: Details
  nameWithType: BookA.Details
  fullName: ConsoleApp1.BookA.Details
- uid: System.Collections.Generic.Dictionary{System.String,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int32>
  nameWithType: Dictionary<String, Int32>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int32>
  nameWithType.vb: Dictionary(Of String, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int32)
  name.vb: Dictionary(Of String, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: ConsoleApp1.BookA.defaultFun*
  commentId: Overload:ConsoleApp1.BookA.defaultFun
  name: defaultFun
  nameWithType: BookA.defaultFun
  fullName: ConsoleApp1.BookA.defaultFun
- uid: ConsoleApp1.DefaultFun
  commentId: T:ConsoleApp1.DefaultFun
  parent: ConsoleApp1
  name: DefaultFun
  nameWithType: DefaultFun
  fullName: ConsoleApp1.DefaultFun
- uid: ConsoleApp1.BookA.ExtensionData*
  commentId: Overload:ConsoleApp1.BookA.ExtensionData
  name: ExtensionData
  nameWithType: BookA.ExtensionData
  fullName: ConsoleApp1.BookA.ExtensionData
- uid: System.Collections.Generic.Dictionary{System.String,System.Text.Json.JsonElement}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Text.Json.JsonElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, JsonElement>
  nameWithType: Dictionary<String, JsonElement>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Text.Json.JsonElement>
  nameWithType.vb: Dictionary(Of String, JsonElement)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Text.Json.JsonElement)
  name.vb: Dictionary(Of String, JsonElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonElement
    name: JsonElement
    nameWithType: JsonElement
    fullName: System.Text.Json.JsonElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonElement
    name: JsonElement
    nameWithType: JsonElement
    fullName: System.Text.Json.JsonElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ConsoleApp1.BookA.ToString*
  commentId: Overload:ConsoleApp1.BookA.ToString
  name: ToString
  nameWithType: BookA.ToString
  fullName: ConsoleApp1.BookA.ToString
- uid: ConsoleApp1.BookA.One*
  commentId: Overload:ConsoleApp1.BookA.One
  name: One
  nameWithType: BookA.One
  fullName: ConsoleApp1.BookA.One
